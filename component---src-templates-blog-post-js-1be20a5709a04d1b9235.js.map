{"version":3,"file":"component---src-templates-blog-post-js-1be20a5709a04d1b9235.js","mappings":"yJAiCA,IA9Be,IAAoC,IAAnC,SAAEA,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EAD6B,MAChBH,EAASI,SAC5B,IAAIC,EAgBJ,OAbEA,EADEF,EAEA,sBAAIG,UAAU,gBACZ,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAKP,IAKhB,gBAAC,EAAAM,KAAI,CAACD,UAAU,mBAAmBE,GAAG,KACnCP,GAML,uBAAKK,UAAU,iBAAiB,oBAAmBH,GACjD,0BAAQG,UAAU,iBAAiBD,GACnC,4BAAOH,GACP,0BAAQI,UAAU,iBAAgB,MAC7B,IAAIG,MAAOC,cAAc,0CAE1B,C,+CCoBV,IAvCY,IAAuC,IAAD,UAArC,YAAEC,EAAW,MAAEV,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEU,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjB,EAAmBd,MAExC,OACE,gCACE,6BAAQe,EAAkBf,EAAK,MAAMe,EAAiBf,GACtD,wBAAMgB,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASjB,IACnC,wBAAMkB,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAN,EAAKG,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMJ,KAAK,gBAAgBC,QAASjB,IACpC,wBAAMgB,KAAK,sBAAsBC,QAASJ,IACzCZ,EACA,C,6GCxCP,MAqDaoB,EAAO,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFxB,MAAOwB,EAAKC,YAAYzB,MACxBU,YAAac,EAAKC,YAAYf,aAAec,EAAKE,SAClD,EAIN,UA9DyB,IAGlB,IAAD,MAFJJ,MAAM,SAAEK,EAAQ,KAAEC,EAAI,KAAEjB,EAAMY,eAAgBC,GAAM,SACpDzB,GACD,EACC,MAAM8B,GAA6B,QAAjB,EAAAlB,EAAKG,oBAAY,aAAjB,EAAmBd,QAAK,QAE1C,OACE,gBAAC,IAAM,CAACD,SAAUA,EAAUC,MAAO6B,GACjC,2BACExB,UAAU,YACVyB,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYR,EAAKC,YAAYzB,OAC1C,yBAAIwB,EAAKC,YAAYQ,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQX,EAAKY,MACxCJ,SAAS,gBAEX,4BAEF,uBAAK3B,UAAU,iBACb,sBACEgC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGf,GACC,gBAAC,EAAArB,KAAI,CAACC,GAAIoB,EAASgB,OAAOC,KAAMC,IAAI,QAAO,KACtClB,EAASF,YAAYzB,QAI9B,0BACG4B,GACC,gBAAC,EAAAtB,KAAI,CAACC,GAAIqB,EAAKe,OAAOC,KAAMC,IAAI,QAC7BjB,EAAKH,YAAYzB,MAAM,SAM3B,C","sources":["webpack://emersonmde-github-io/./src/components/layout.js","webpack://emersonmde-github-io/./src/components/seo.js","webpack://emersonmde-github-io/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer className=\"layout-footer\">\n        © {new Date().getFullYear()}, Matthew Emerson. All rights reserved\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["location","title","children","isRootPath","pathname","header","className","Link","to","Date","getFullYear","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","Head","data","markdownRemark","post","frontmatter","excerpt","previous","next","siteTitle","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}