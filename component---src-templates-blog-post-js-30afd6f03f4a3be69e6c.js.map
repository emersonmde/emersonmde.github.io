{"version":3,"file":"component---src-templates-blog-post-js-30afd6f03f4a3be69e6c.js","mappings":"yJA0DA,IA/CY,KAAO,IAAD,IAChB,MAAMA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBS,QAAzB,EAAGD,EAAKE,KAAKC,oBAAY,OAAtB,EAAwBC,OACF,QAAzB,EAAGJ,EAAKE,KAAKC,oBAAY,OAAtB,EAAwBE,OAEvC,OACE,2BAqBA,C,+CCnBJ,IAhCe,IAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EAD6B,MAChBH,EAASI,SAC5B,IAAIC,EAgBJ,OAbEA,EADEF,EAEA,sBAAIG,UAAU,gBACZ,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAKP,IAKhB,gBAAC,EAAAM,KAAI,CAACD,UAAU,mBAAmBE,GAAG,KACnCP,GAML,uBAAKK,UAAU,iBAAiB,oBAAmBH,GACjD,0BAAQG,UAAU,iBAAiBD,GACnC,4BAAOH,GACP,8BAAQ,MACH,IAAIO,MAAOC,cAAc,eAC5B,IACA,qBAAGC,KAAK,4BAA2B,WAEjC,C,+CCkBV,IAvCY,IAAuC,IAAD,UAArC,YAAEC,EAAW,MAAEX,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEN,IAASD,EAAAA,EAAAA,gBAAe,cAgB1BkB,EAAkBD,GAAehB,EAAKC,aAAae,YACnDE,EAAgC,QAApB,EAAGlB,EAAKC,oBAAY,aAAjB,EAAmBI,MAExC,OACE,gCACE,6BAAQa,EAAkBb,EAAK,MAAMa,EAAiBb,GACtD,wBAAMc,KAAK,cAAcC,QAASH,IAClC,wBAAMI,SAAS,WAAWD,QAASf,IACnC,wBAAMgB,SAAS,iBAAiBD,QAASH,IACzC,wBAAMI,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAApB,EAAKC,oBAAY,OAAQ,QAAR,EAAjB,EAAmBE,cAAM,WAAR,EAAjB,EAA2BmB,UAAO,KAE7C,wBAAMH,KAAK,gBAAgBC,QAASf,IACpC,wBAAMc,KAAK,sBAAsBC,QAASH,IACzCX,EACA,C,uHCtCP,MAwDaiB,EAAO,IAAyC,IAAtCzB,MAAQ0B,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFpB,MAAOoB,EAAKC,YAAYrB,MACxBW,YAAaS,EAAKC,YAAYV,aAAeS,EAAKE,SAClD,EAIN,UAjEyB,IAGlB,IAAD,MAFJ7B,MAAM,SAAE8B,EAAQ,KAAEC,EAAI,KAAE7B,EAAMwB,eAAgBC,GAAM,SACpDrB,GACD,EACC,MAAM0B,GAA6B,QAAjB,EAAA9B,EAAKC,oBAAY,aAAjB,EAAmBI,QAAK,QAE1C,OACE,gBAAC,IAAM,CAACD,SAAUA,EAAUC,MAAOyB,GACjC,2BACEpB,UAAU,YACVqB,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYR,EAAKC,YAAYrB,OAC1C,yBAAIoB,EAAKC,YAAYQ,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQX,EAAKY,MACxCJ,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAG,QAGR,uBAAKvB,UAAU,iBACb,sBACE4B,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGf,GACC,gBAAC,EAAAjB,KAAI,CAACC,GAAIgB,EAASgB,OAAOC,KAAMC,IAAI,QAAO,KACtClB,EAASF,YAAYrB,QAI9B,0BACGwB,GACC,gBAAC,EAAAlB,KAAI,CAACC,GAAIiB,EAAKe,OAAOC,KAAMC,IAAI,QAC7BjB,EAAKH,YAAYrB,MAAM,SAM3B,C","sources":["webpack://emersonmde-github-io/./src/components/bio.js","webpack://emersonmde-github-io/./src/components/layout.js","webpack://emersonmde-github-io/./src/components/seo.js","webpack://emersonmde-github-io/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div></div>\n    // <div className=\"bio\">\n    //   <StaticImage\n    //     className=\"bio-avatar\"\n    //     layout=\"fixed\"\n    //     formats={[\"auto\", \"webp\", \"avif\"]}\n    //     src=\"../images/profile-pic.png\"\n    //     width={50}\n    //     height={50}\n    //     quality={95}\n    //     alt=\"Profile picture\"\n    //   />\n    //   {author?.name && (\n    //     <p>\n    //       Written by <strong>{author.name}</strong> {author?.summary || null}\n    //       {` `}\n    //       <a href={`https://twitter.com/${social?.twitter || ``}`}>\n    //         You should follow them on Twitter\n    //       </a>\n    //     </p>\n    //   )}\n    // </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","site","siteMetadata","author","social","location","title","children","isRootPath","pathname","header","className","Link","to","Date","getFullYear","href","description","metaDescription","defaultTitle","name","content","property","twitter","Head","markdownRemark","post","frontmatter","excerpt","previous","next","siteTitle","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}