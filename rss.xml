<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 05 Feb 2024 14:29:16 GMT</lastBuildDate><item><title><![CDATA[Hello, Gatsby]]></title><description><![CDATA[I recently discovered a great podcast, Programming Throwdown,
that featured Gatsby in a prior episode. It was
described as a quick and easyâ€¦]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/hello-gatsby/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/hello-gatsby/</guid><pubDate>Sun, 04 Feb 2024 10:46:23 GMT</pubDate><content:encoded>&lt;p&gt;I recently discovered a great podcast, &lt;a href=&quot;https://www.programmingthrowdown.com/&quot;&gt;Programming Throwdown&lt;/a&gt;,
that featured &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt; in a prior episode. It was
described as a quick and easy way to generate static websites while still
harnessing the power and compatibility of React. At the time I pictured a
templating engine, similar to Jekyll, with a build process that made it easy to
deploy static content. I wasn&apos;t prepared for the power and flexibility that
Gatsby offers right out of the box.&lt;/p&gt;
&lt;p&gt;A few years ago, I decided to build a &lt;a href=&quot;https://memerson.dev/&quot;&gt;personal website&lt;/a&gt; using React. My goal was
to approach the project much the same way I would at work. I wanted to have a
&lt;a href=&quot;https://github.com/emersonmde/memerson&quot;&gt;React website&lt;/a&gt; deployed in S3 with CloudFront that stored posts in DynamoDB.
Another major goal was to have all of this defined using the &lt;a href=&quot;https://github.com/emersonmde/memerson/tree/main/infrastructure&quot;&gt;AWS CDK&lt;/a&gt; including a
fully automated &lt;a href=&quot;https://github.com/emersonmde/memerson/blob/main/infrastructure/lib/pipeline-stack.ts&quot;&gt;CI/CD pipeline&lt;/a&gt;. I was able to get a basic website set up using
Cognito for authentication, API Gateway and Lambda for the backend, and a
pre-built &lt;a href=&quot;https://github.com/jpuri/react-draft-wysiwyg&quot;&gt;WYSIWYG editor component&lt;/a&gt; to create and edit posts all deployed using
AWS Code Pipeline.&lt;/p&gt;
&lt;p&gt;Despite the progress, I still wasn&apos;t happy with the editor or the pipeline.
Also, to no one&apos;s surprise, CDK caused additional headaches that made changing
and testing the backend or the pipeline a multi-hour endeavor. The thought of
wrestling with the CDK or the pre-built WYSIWYG component meant I just avoided
making any improvements and eventually abandoned the idea of blogging
altogether.&lt;/p&gt;
&lt;h2&gt;Enter GitHub Actions&lt;/h2&gt;
&lt;p&gt;My first exposure to &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt; was from the book &lt;a href=&quot;https://www.zero2prod.com/index.html?country_code=US&quot;&gt;Zero To Production In Rust&lt;/a&gt;
which has a section on CI/CD pipelines. The book provides a single workflow
configuration file, less than 100 lines, that can be used as a start for any Rust
project that includes building, testing, linting, formatting, and code coverage.
After years of working with proprietary and public CI/CD solutions, the ease of
use and general applicability of GitHub Actions blew me away.&lt;/p&gt;
&lt;p&gt;One of the best parts of GitHub Actions is the extensive community that have built
out many common CI/CD tasks, one of which is deploying directly to &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
Without the need to setup any keys, permissions, or targets, an action such as
&lt;a href=&quot;https://github.com/JamesIves/github-pages-deploy-action&quot;&gt;JamesIves/github-pages-deploy-action&lt;/a&gt; can deploy any directory from the build
directly to a branch (such as &lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here is the workflow I&apos;ve been using with Gatsby (more on this in a minute), but it
should work with any node build:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Build  
&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; main  
&lt;span class=&quot;token key atrule&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;token key atrule&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; write  
&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest  
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v4  
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Use Node.js  
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v4.0.1  
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
          &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;20&apos;&lt;/span&gt;  
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install Dependencies  
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm install  
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Build  
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run build  
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy  
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; JamesIves/github&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;deploy&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;action@v4.5.0  
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
          &lt;span class=&quot;token key atrule&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gh&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages  
          &lt;span class=&quot;token key atrule&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; public&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each &lt;code class=&quot;language-text&quot;&gt;uses&lt;/code&gt; directive invokes an action with the parameters specified in the &lt;code class=&quot;language-text&quot;&gt;with&lt;/code&gt;
block. Need to add a step, change the triggers, or re-order steps? No problem,
each time this file is pushed upstream, the workflow automatically changes.&lt;/p&gt;
&lt;p&gt;This was exactly what I was looking for. The best part about this workflow, it deploys
to GitHub Pages which is completely free! No more worrying about the hidden cost
of auto scaling serverless solutions. The last piece of the puzzle was a way to
manage and edit blog posts as markdown files without the need to create a bespoke
backend solution. Thats where Gatsby comes in.&lt;/p&gt;
&lt;h2&gt;The Almost Great Gatsby&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt; is an open source framework based on React that includes a
&lt;a href=&quot;https://www.netlify.com/platform/connect/&quot;&gt;GraphQL data layer&lt;/a&gt; and works out of the box to compile
and build fully featured React websites. There are also many starter templates that
make it easy to get up and running. In this case, I chose to start with the
&lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-blog&quot;&gt;Gatsby&apos;s Starter Blog&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Gatsby:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-g&lt;/span&gt; gatsby-cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Create new project from a template:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;gatsby new blog https://github.com/gatsbyjs/gatsby-starter-blog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Run the development site:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; blog
gatsby develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Out of the box the &lt;code class=&quot;language-text&quot;&gt;gatsby-starter-blog&lt;/code&gt; is configured to use Gatsby&apos;s GraphQL data
layer to find markdown files corresponding to blog posts and combine that with website
metadata. The results are then rendered as HTML using React components.&lt;/p&gt;
&lt;p&gt;This works incredibly well. Each blog post is plain markdown in a directory. By using
markdown saved locally, I can use something like &lt;a href=&quot;https://obsidian.md/&quot;&gt;Obsidian&lt;/a&gt;, a markdown
focused editor with vim motions, to create and edit posts. The metadata is defined in
the &lt;code class=&quot;language-text&quot;&gt;gatsby-config.js&lt;/code&gt; file which makes it easy to reference in any component.
Each query is run at build time to generate the necessary static assets which can
be uploaded to any static website host. Also since Gatsby is a React based
framework, there was no need for me to learn yet another frontend framework.&lt;/p&gt;
&lt;p&gt;Alright, what&apos;s the catch? So far everything I&apos;ve wanted to do has been on the
happy path. Its not clear how much trouble it would be to customize Gatsby,
although it does support plugins. Also including a full GraphQL data layer on
top of React with additional support for SEO, Server Side Rendering, Deferred
Static Generation, and more means this is anything but light weight. I&apos;m already
not a big fan of learning GraphQL to access files and data, but only time will tell
if scaling or extending this website in the future proves to be more trouble than
it&apos;s worth.&lt;/p&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Overall I&apos;m really happy with the current setup. GitHub Actions and Pages have
been a true pleasure to work with compared to some other solutions. I&apos;m excited to
take full advantage of the power and speed of Gatsby, but cautious of the complexity
it may add when maintaining this project long term.&lt;/p&gt;
&lt;p&gt;Interested in what the final result looks like? Check out the &lt;a href=&quot;https://github.com/emersonmde/emersonmde.github.io&quot;&gt;repo for this site on
GitHub&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>